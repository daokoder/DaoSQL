load mysql;
#load sqlite;

# class that can be mapped to a database table
class Gene
{
	var id   : SQL::INTEGER_PRIMARY_KEY_AUTO_INCREMENT;
	var name : SQL::VARCHAR128;
	var seq  : SQL::TEXT;
}
# connect database
#db = SQLDatabase<PostgreSQL>( "dbname", "host", "user", "pwd" );
db = SQL::Database<SQL::MySQL>( "test", "localhost", "root", "" );
#db = SQLDatabase<SQLite>( "Test_Gene.db" );

# create a table for class Gene
std.exec {
	defer(any){ return none }
	db.CreateTable( Gene );
}

gene = Gene.{ 0, "RAS", "...AATCCGG..." };
gene2 = Gene.{ 0, "RAS2", "...AATCCGCCC..." };
# insert a record into the table
db.Insert( gene, gene2 );

# SELECT * FROM Gene WHERE name = "RASE";
h = db.Select( Gene ).Where().EQ( "name", "RAS2" );
io.writeln( std.about(h) )

io.writeln( gene.id, gene.name, gene.seq );
# query and store the result into "gene" object:
h.Query( gene ){
	io.writeln( gene.id, gene.name, gene.seq );
	return $continue;
}
